/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CalorieTracker;

import java.awt.Color;
import java.io.File;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JLabel;

/**
 *
 * @author Pippin
 */
public class MainMenu extends javax.swing.JFrame
{

    /**
     * Creates new form MainMenu
     */
    public MainMenu()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        TopBar = new javax.swing.JPanel();
        CurrentDate = new javax.swing.JLabel();
        Options = new CalorieTracker.FlatButton();
        MiddleBar = new javax.swing.JPanel();
        DayHolder = new javax.swing.JPanel();
        PreviousMonth = new CalorieTracker.FlatButton();
        NextMonth = new CalorieTracker.FlatButton();
        SelectedMonth = new javax.swing.JLabel();
        SelectedYear = new javax.swing.JLabel();
        NutritionYesterdayTitle = new javax.swing.JLabel();
        ProteinYesterdayTitel = new javax.swing.JLabel();
        FatsYesterdayTitel = new javax.swing.JLabel();
        CarbohydratesYesterdayTitel = new javax.swing.JLabel();
        CaloriesYesterdayTitel = new javax.swing.JLabel();
        ProteinSumYesterday = new javax.swing.JLabel();
        FatsSumYesterday = new javax.swing.JLabel();
        CarbohydratesSumYesterday = new javax.swing.JLabel();
        CaloriesSumYesterday = new javax.swing.JLabel();
        NutritionSelectedTitle = new javax.swing.JLabel();
        ProteinSelectedTitel = new javax.swing.JLabel();
        FatsSelectedTitel = new javax.swing.JLabel();
        CarbohydratesSelectedTitel = new javax.swing.JLabel();
        CaloriesSelectedTitel = new javax.swing.JLabel();
        ProteinSumSelected = new javax.swing.JLabel();
        FatsSumSelected = new javax.swing.JLabel();
        CarbohydratesSumSelected = new javax.swing.JLabel();
        CaloriesSumSelected = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                MainMenuWindowOpened(evt);
            }
        });

        TopBar.setBackground(new java.awt.Color(75, 108, 158));
        TopBar.setPreferredSize(new java.awt.Dimension(654, 54));

        CurrentDate.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
        CurrentDate.setForeground(new java.awt.Color(0, 0, 0));
        CurrentDate.setText("current date");
        CurrentDate.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                CurrentDateMouseClicked(evt);
            }
        });

        Options.setBorder(null);
        Options.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CalorieTracker/Images/Settings_32x32.png"))); // NOI18N
        Options.setOpaque(false);

        javax.swing.GroupLayout TopBarLayout = new javax.swing.GroupLayout(TopBar);
        TopBar.setLayout(TopBarLayout);
        TopBarLayout.setHorizontalGroup(
            TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CurrentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Options, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        TopBarLayout.setVerticalGroup(
            TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopBarLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Options, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CurrentDate))
                .addGap(8, 8, 8))
        );

        MiddleBar.setBackground(new java.awt.Color(58, 79, 99));
        MiddleBar.setPreferredSize(new java.awt.Dimension(654, 54));

        javax.swing.GroupLayout MiddleBarLayout = new javax.swing.GroupLayout(MiddleBar);
        MiddleBar.setLayout(MiddleBarLayout);
        MiddleBarLayout.setHorizontalGroup(
            MiddleBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        MiddleBarLayout.setVerticalGroup(
            MiddleBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );

        DayHolder.setBackground(new java.awt.Color(255, 255, 255));
        DayHolder.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        DayHolder.setForeground(new java.awt.Color(60, 63, 65));

        javax.swing.GroupLayout DayHolderLayout = new javax.swing.GroupLayout(DayHolder);
        DayHolder.setLayout(DayHolderLayout);
        DayHolderLayout.setHorizontalGroup(
            DayHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );
        DayHolderLayout.setVerticalGroup(
            DayHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 291, Short.MAX_VALUE)
        );

        PreviousMonth.setText("<");
        PreviousMonth.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                PreviousMonthMouseClicked(evt);
            }
        });

        NextMonth.setText(">");
        NextMonth.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                NextMonthMouseClicked(evt);
            }
        });

        SelectedMonth.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        SelectedMonth.setText("selected month");

        SelectedYear.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        SelectedYear.setText("selected year");

        NutritionYesterdayTitle.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        NutritionYesterdayTitle.setText("yesterday");

        ProteinYesterdayTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        ProteinYesterdayTitel.setText("proteins");

        FatsYesterdayTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        FatsYesterdayTitel.setText("fats");

        CarbohydratesYesterdayTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CarbohydratesYesterdayTitel.setText("carbohydrathes");

        CaloriesYesterdayTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CaloriesYesterdayTitel.setText("calories");

        ProteinSumYesterday.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        ProteinSumYesterday.setText("-");

        FatsSumYesterday.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        FatsSumYesterday.setText("-");

        CarbohydratesSumYesterday.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CarbohydratesSumYesterday.setText("-");

        CaloriesSumYesterday.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CaloriesSumYesterday.setText("-");

        NutritionSelectedTitle.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        NutritionSelectedTitle.setText("selected day");

        ProteinSelectedTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        ProteinSelectedTitel.setText("proteins");

        FatsSelectedTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        FatsSelectedTitel.setText("fats");

        CarbohydratesSelectedTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CarbohydratesSelectedTitel.setText("carbohydrathes");

        CaloriesSelectedTitel.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CaloriesSelectedTitel.setText("calories");

        ProteinSumSelected.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        ProteinSumSelected.setText("-");

        FatsSumSelected.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        FatsSumSelected.setText("-");

        CarbohydratesSumSelected.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CarbohydratesSumSelected.setText("-");

        CaloriesSumSelected.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14)); // NOI18N
        CaloriesSumSelected.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TopBar, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
                    .addComponent(MiddleBar, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PreviousMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SelectedMonth)
                                .addGap(18, 18, 18)
                                .addComponent(SelectedYear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NextMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(DayHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ProteinYesterdayTitel)
                                    .addComponent(ProteinSumYesterday))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FatsYesterdayTitel)
                                    .addComponent(FatsSumYesterday))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CarbohydratesYesterdayTitel)
                                    .addComponent(CarbohydratesSumYesterday))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CaloriesSumYesterday)
                                    .addComponent(CaloriesYesterdayTitel)))
                            .addComponent(NutritionYesterdayTitle)
                            .addComponent(NutritionSelectedTitle)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ProteinSelectedTitel)
                                    .addComponent(ProteinSumSelected))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FatsSelectedTitel)
                                    .addComponent(FatsSumSelected))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CarbohydratesSelectedTitel)
                                    .addComponent(CarbohydratesSumSelected))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CaloriesSumSelected)
                                    .addComponent(CaloriesSelectedTitel))))
                        .addGap(0, 93, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TopBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MiddleBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(NutritionYesterdayTitle)
                        .addComponent(PreviousMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SelectedYear)
                            .addComponent(SelectedMonth))
                        .addComponent(NextMonth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProteinYesterdayTitel)
                            .addComponent(FatsYesterdayTitel)
                            .addComponent(CarbohydratesYesterdayTitel)
                            .addComponent(CaloriesYesterdayTitel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProteinSumYesterday)
                            .addComponent(FatsSumYesterday)
                            .addComponent(CarbohydratesSumYesterday)
                            .addComponent(CaloriesSumYesterday))
                        .addGap(68, 68, 68)
                        .addComponent(NutritionSelectedTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProteinSelectedTitel)
                            .addComponent(FatsSelectedTitel)
                            .addComponent(CarbohydratesSelectedTitel)
                            .addComponent(CaloriesSelectedTitel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProteinSumSelected)
                            .addComponent(FatsSumSelected)
                            .addComponent(CarbohydratesSumSelected)
                            .addComponent(CaloriesSumSelected)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(DayHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MainMenuWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_MainMenuWindowOpened
    {//GEN-HEADEREND:event_MainMenuWindowOpened
        getContentPane().setBackground(new Color(255, 255, 255));
        setTitle("Overview");

        setLayout(null);
        TopBar.setLayout(null);
        MiddleBar.setLayout(null);

        SetLocalisation();

        CreateCalendarDays();

        DayHolder.setBackground(new Color(60, 63, 65));
        TopBar.setSize(getContentPane().getWidth(), 50);
        TopBar.setLocation(0, 0);

        MiddleBar.setSize(getContentPane().getWidth(), 50);
        MiddleBar.setLocation(0, TopBar.getY() + TopBar.getHeight());

        CurrentDate.setLocation(10, (TopBar.getHeight() - CurrentDate.getHeight()) / 2);
        Options.setLocation(TopBar.getWidth() - Options.getWidth() - 10, (TopBar.getHeight() - Options.getHeight()) / 2);

        DayHolder.setSize(384, 352);
        DayHolder.setLocation(12, getContentPane().getHeight() - DayHolder.getHeight() - 12);

        PreviousMonth.setLocation(DayHolder.getX(), DayHolder.getY() - PreviousMonth.getHeight() - 5);
        NextMonth.setLocation(DayHolder.getX() + DayHolder.getWidth() - NextMonth.getWidth(), PreviousMonth.getY());
        SelectedMonth.setLocation(PreviousMonth.getX() + PreviousMonth.getWidth() + 5, PreviousMonth.getY());
        SelectedYear.setLocation(SelectedMonth.getX() + SelectedMonth.getWidth() + 5, PreviousMonth.getY());

        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("EEEE, dd.MM.yyyy");
        LocalDate today = LocalDate.now();
        CurrentDate.setText(dateFormat.format(today));
    }//GEN-LAST:event_MainMenuWindowOpened

    private void PreviousMonthMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_PreviousMonthMouseClicked
    {//GEN-HEADEREND:event_PreviousMonthMouseClicked
        if (!(yearHolder == 1917) || !(monthHolder == 1))
        {
            Calendar calendar = Calendar.getInstance();

            if (monthHolder == 0)
            {
                yearHolder--;
                monthHolder = 11;
                calendar.set(Calendar.YEAR, yearHolder);
                calendar.set(Calendar.MONTH, monthHolder);

                SelectedYear.setText(Integer.toString(yearHolder));
                SelectedMonth.setText(calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));

                Functions.DebugPrint("Number: " + monthHolder + " - Month name: " + SelectedMonth.getText());
            } else if (monthHolder > 0)
            {
                monthHolder--;
                calendar.set(yearHolder, monthHolder, 1);

                SelectedMonth.setText(calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));

                Functions.DebugPrint("Number: " + monthHolder + " - Month name: " + SelectedMonth.getText());
            }

            // Completley refill the calendar
            FillCalendar();

            // Reset the selected day nutrition
            ProteinSumSelected.setText("-");
            FatsSumSelected.setText("-");
            CarbohydratesSumSelected.setText("-");
            CaloriesSumSelected.setText("-");

            lastSelectedDayIndex = 0;
        }
    }//GEN-LAST:event_PreviousMonthMouseClicked

    private void NextMonthMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_NextMonthMouseClicked
    {//GEN-HEADEREND:event_NextMonthMouseClicked
        if (!(yearHolder == 2199) || !(monthHolder == 11))
        {
            Calendar calendar = Calendar.getInstance();

            if (monthHolder == 11)
            {
                yearHolder++;
                monthHolder = 0;
                calendar.set(Calendar.YEAR, yearHolder);
                calendar.set(Calendar.MONTH, monthHolder);

                SelectedYear.setText(Integer.toString(yearHolder));
                SelectedMonth.setText(calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));    // TODO: numbers to variables

                Functions.DebugPrint("Number: " + monthHolder + " - Month name: " + SelectedMonth.getText());
            } else if (monthHolder < 11)
            {
                monthHolder++;
                calendar.set(yearHolder, monthHolder, 1);

                SelectedMonth.setText(calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));    // TODO: numbers to variables

                Functions.DebugPrint("Number: " + monthHolder + " - Month name: " + SelectedMonth.getText());
            }

            FillCalendar();

            ProteinSumSelected.setText("-");
            FatsSumSelected.setText("-");
            CarbohydratesSumSelected.setText("-");
            CaloriesSumSelected.setText("-");

            lastSelectedDayIndex = 0;
        }
    }//GEN-LAST:event_NextMonthMouseClicked

    private void CurrentDateMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CurrentDateMouseClicked
    {//GEN-HEADEREND:event_CurrentDateMouseClicked
        if ((yearHolder != LocalDate.now().getYear()) || (monthHolder != (LocalDate.now().getMonthValue() - 1)))
        {
            Calendar calendar = Calendar.getInstance();

            yearHolder = LocalDate.now().getYear();
            monthHolder = LocalDate.now().getMonthValue() - 1;
            calendar.set(Calendar.MONTH, monthHolder);
            Functions.DebugPrint("Month number: " + Integer.toString(monthHolder));
            SelectedYear.setText(Integer.toString(yearHolder));
            SelectedMonth.setText(calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));

            // Completley refill the calendar
            FillCalendar();

            lastSelectedDayIndex = currentDayIndex;

            calendarDay.get(currentDayIndex).setIsCurrentDay();
        } else
        {
            lastSelectedDayIndex = currentDayIndex;

            calendarDay.get(currentDayIndex).setIsCurrentDay();
        }
    }//GEN-LAST:event_CurrentDateMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CaloriesSelectedTitel;
    private javax.swing.JLabel CaloriesSumSelected;
    private javax.swing.JLabel CaloriesSumYesterday;
    private javax.swing.JLabel CaloriesYesterdayTitel;
    private javax.swing.JLabel CarbohydratesSelectedTitel;
    private javax.swing.JLabel CarbohydratesSumSelected;
    private javax.swing.JLabel CarbohydratesSumYesterday;
    private javax.swing.JLabel CarbohydratesYesterdayTitel;
    private javax.swing.JLabel CurrentDate;
    private javax.swing.JPanel DayHolder;
    private javax.swing.JLabel FatsSelectedTitel;
    private javax.swing.JLabel FatsSumSelected;
    private javax.swing.JLabel FatsSumYesterday;
    private javax.swing.JLabel FatsYesterdayTitel;
    private javax.swing.JPanel MiddleBar;
    private CalorieTracker.FlatButton NextMonth;
    private javax.swing.JLabel NutritionSelectedTitle;
    private javax.swing.JLabel NutritionYesterdayTitle;
    private CalorieTracker.FlatButton Options;
    private CalorieTracker.FlatButton PreviousMonth;
    private javax.swing.JLabel ProteinSelectedTitel;
    private javax.swing.JLabel ProteinSumSelected;
    private javax.swing.JLabel ProteinSumYesterday;
    private javax.swing.JLabel ProteinYesterdayTitel;
    private javax.swing.JLabel SelectedMonth;
    private javax.swing.JLabel SelectedYear;
    private javax.swing.JPanel TopBar;
    // End of variables declaration//GEN-END:variables

    // *****************************************
    // ******** Self declared variables ********
    // *****************************************
    private DayOverview dayOverviewLayout;
    private BMR_DailyCalorieCalculate bmr_DailyCalorieCalculate;
    private OptionsMenu optionsMenu;
//    private FileHandling_Ini fileHandling_Ini;
//
//    public DayOverview dayOverviewLayoutPublic()
//    {
//        get {
//            return dayOverviewLayout;
//        }
//        set {
//            dayOverviewLayout = value;
//        }
//    }
//
    private List<CalendarDay> calendarDay = new ArrayList();
    private JLabel[] weekDays = new JLabel[7];
//
//    // ======== Access to local controls - start ========
//    public JLabel ProteinSumYesterdayPublic()
//
//    {
//        get {
//            return ProteinSumYesterday;
//        }
//        set {
//            ProteinSumYesterday = value;
//        }
//    }
//
//    public JLabel FatsSumYesterdayPublic
//
//    
//    {
//        get {
//            return FatsSumYesterday;
//        }
//        set {
//            FatsSumYesterday = value;
//        }
//    }
//
//    public JLabel CarbohydratesSumYesterdayPublic
//
//    
//    {
//        get {
//            return CarbohydratesSumYesterday;
//        }
//        set {
//            CarbohydratesSumYesterday = value;
//        }
//    }
//
//    public JLabel CaloriesSumYesterdayPublic
//
//    
//    {
//        get {
//            return CaloriesSumYesterday;
//        }
//        set {
//            CaloriesSumYesterday = value;
//        }
//    }
//
//    public JLabel ProteinSumSelectedPublic
//
//    
//    {
//        get {
//            return ProteinSumSelected;
//        }
//        set {
//            ProteinSumSelected = value;
//        }
//    }
//
//    public JLabel FatsSumSelectedPublic
//
//    
//    {
//        get {
//            return FatsSumSelected;
//        }
//        set {
//            FatsSumSelected = value;
//        }
//    }
//
//    public JLabel CarbohydratesSumSelectedPublic
//
//    
//    {
//        get {
//            return CarbohydratesSumSelected;
//        }
//        set {
//            CarbohydratesSumSelected = value;
//        }
//    }
//
//    public JLabel CaloriesSumSelectedPublic
//
//    
//    {
//        get {
//            return CaloriesSumSelected;
//        }
//        set {
//            CaloriesSumSelected = value;
//        }
//    }
//    // ======== Access to local controls - end ========
//
    private int yearHolder = Calendar.getInstance().get(1);
    private int monthHolder = Calendar.getInstance().get(2);    // TODO: What does the number stands for
    private int currentDayIndex;                        // Contains the index number of the current day, that is included in the calendarDay list - for easy access (e.g. to mark or select the current day
//
    private int lastSelectedDayIndex = 0;

    public int getLastSelectedDayIndex()
    {
        return lastSelectedDayIndex;
    }

    public void setLastSelectedDayIndex(int _passedIndex)
    {
        lastSelectedDayIndex = _passedIndex;
    }

    public enum language
    {
        english,
        spanish,
        german
    }
//
//    public language currentLanguage = language.english;
//
//    // *****************************************
//    // ******** End of self declared variables ********
//    // *****************************************
//
//    private void MainMenu_Load(object sender, EventArgs e)
//    {
//        // Set all text regarding the current culture info
//        SetLocalisation();
//
//        dayOverviewLayout = new DayOverview();
//        dayOverviewLayout.FillDatabaseAdapter();
//
//        CreateCalendarDays();
//
//        // Visual appearance
//        TopBar.Left = 0;
//        TopBar.Top = 0;
//        TopBar.Width = this.ClientSize.Width;
//        TopBar.Height = 40;
//
//        TopBar1.Left = 0;
//        TopBar1.Top = TopBar.Top + TopBar.Height;
//        TopBar1.Width = this.ClientSize.Width;
//        TopBar1.Height = 40;
//
//        DayHolder.Width = (50 * 7) + 34;
//        DayHolder.Height = (50 * 6) + 52;
//
//        // ======== Controls for yesterday nutrition - start ========
//        NutritionYesterdayTitle.Left = DayHolder.Right + 50;
//        NutritionYesterdayTitle.Top = DayHolder.Top;
//
//        ProteinYesterdayTitel.Left = NutritionYesterdayTitle.Left;
//        ProteinYesterdayTitel.Top = NutritionYesterdayTitle.Bottom + 10;
//
//        FatsYesterdayTitel.Left = ProteinYesterdayTitel.Right + 50;
//        FatsYesterdayTitel.Top = NutritionYesterdayTitle.Bottom + 10;
//
//        CarbohydratesYesterdayTitel.Left = FatsYesterdayTitel.Right + 50;
//        CarbohydratesYesterdayTitel.Top = NutritionYesterdayTitle.Bottom + 10;
//
//        CaloriesYesterdayTitel.Left = CarbohydratesYesterdayTitel.Right + 50;
//        CaloriesYesterdayTitel.Top = NutritionYesterdayTitle.Bottom + 10;
//
//        ProteinSumYesterday.Left = ProteinYesterdayTitel.Left;
//        ProteinSumYesterday.Top = ProteinYesterdayTitel.Bottom + 5;
//
//        FatsSumYesterday.Left = FatsYesterdayTitel.Left;
//        FatsSumYesterday.Top = ProteinYesterdayTitel.Bottom + 5;
//
//        CarbohydratesSumYesterday.Left = CarbohydratesYesterdayTitel.Left;
//        CarbohydratesSumYesterday.Top = ProteinYesterdayTitel.Bottom + 5;
//
//        CaloriesSumYesterday.Left = CaloriesYesterdayTitel.Left;
//        CaloriesSumYesterday.Top = ProteinYesterdayTitel.Bottom + 5;
//        // ======== Controls for yesterday nutrition - end ========
//
//        // ======== Controls for selected nuitrition - start ========
//        NutritionSelectedTitle.Left = NutritionYesterdayTitle.Left;
//        NutritionSelectedTitle.Top = DayHolder.Top + (DayHolder.Height / 2);
//
//        ProteinSelectedTitel.Left = NutritionSelectedTitle.Left;
//        ProteinSelectedTitel.Top = NutritionSelectedTitle.Bottom + 10;
//
//        FatsSelectedTitel.Left = ProteinSelectedTitel.Right + 50;
//        FatsSelectedTitel.Top = NutritionSelectedTitle.Bottom + 10;
//
//        CarbohydratesSelectedTitel.Left = FatsSelectedTitel.Right + 50;
//        CarbohydratesSelectedTitel.Top = NutritionSelectedTitle.Bottom + 10;
//
//        CaloriesSelectedTitel.Left = CarbohydratesSelectedTitel.Right + 50;
//        CaloriesSelectedTitel.Top = NutritionSelectedTitle.Bottom + 10;
//
//        ProteinSumSelected.Left = ProteinSelectedTitel.Left;
//        ProteinSumSelected.Top = ProteinSelectedTitel.Bottom + 5;
//
//        FatsSumSelected.Left = FatsSelectedTitel.Left;
//        FatsSumSelected.Top = ProteinSelectedTitel.Bottom + 5;
//
//        CarbohydratesSumSelected.Left = CarbohydratesSelectedTitel.Left;
//        CarbohydratesSumSelected.Top = ProteinSelectedTitel.Bottom + 5;
//
//        CaloriesSumSelected.Left = CaloriesSelectedTitel.Left;
//        CaloriesSumSelected.Top = ProteinSelectedTitel.Bottom + 5;
//        // ======== Controls for selected nuitrition - end ========
//    }
//

    public void SetLocalisation()
    {
        String currentLanguageString = "ge";
        String currentCountryString = "GE";

        Locale currentLocale = new java.util.Locale(currentLanguageString, currentCountryString);

        ResourceBundle localisationString = java.util.ResourceBundle.getBundle("CalorieTracker.Localisation/Strings", currentLocale);

        // Initialize the configuration file
        InitializeSettingsFile();

        setTitle(localisationString.getString("MainMenuTitle"));

        String monthBuffer = LocalDate.now().getMonth().name().substring(0, 1) + LocalDate.now().getMonth().name().substring(1, LocalDate.now().getMonth().name().length()).toLowerCase();

        CurrentDate.setText(Integer.toString(yearHolder));
        SelectedMonth.setText(monthBuffer);
        SelectedYear.setText(Integer.toString(LocalDate.now().getYear()));

//        NutritionYesterdayTitle.setText(Localization.strings.MainMenu_Label_Yesterday);
//        ProteinYesterdayTitel.setText(Localization.strings.MainMenu_Label_Protein_Title);
//        FatsYesterdayTitel.setText(Localization.strings.MainMenu_Label_Fats_Title);
//        CarbohydratesYesterdayTitel.setText(Localization.strings.MainMenu_Label_Carbohydrates_Title);
//        CaloriesYesterdayTitel.setText(Localization.strings.MainMenu_Label_Calories_Title);
//
//        NutritionSelectedTitle.setText(Localization.strings.MainMenu_Label_SelectedDay);
//        ProteinSelectedTitel.setText(Localization.strings.MainMenu_Label_Protein_Title);
//        FatsSelectedTitel.setText(Localization.strings.MainMenu_Label_Fats_Title);
//        CarbohydratesSelectedTitel.setText(Localization.strings.MainMenu_Label_Carbohydrates_Title);
//        CaloriesSelectedTitel.setText(Localization.strings.MainMenu_Label_Calories_Title);
    }
//

    private void InitializeSettingsFile()
    {
        if (new File(System.getProperty("user.dir") + "\\config\\Settings.properties").exists())
        {
//            fileHandling_Ini = new FileHandling_Ini("config/Settings.ini");
//
//            switch (fileHandling_Ini.IniReadValue("Application Settings", "Language"))
//            {
//                case "English":
//                {
//                    currentLanguage = language.english;
//                }
//                break;
//                case "Spanish":
//                {
//                    currentLanguage = language.spanish;
//                }
//                break;
//                case "German":
//                {
//                    currentLanguage = language.german;
//                }
//                break;
//                default:
//                {
//                    currentLanguage = language.english;
//                    // Create an entry in the protocoll file that the language could not be retrieved
//                }
//                break;
//            }
        } else
        {
//            fileHandling_Ini = new FileHandling_Ini("config/Settings.ini");
//
//            if (!Directory.Exists("config"))
//            {
//                Directory.CreateDirectory("config");
//            }
//
//            fileHandling_Ini.IniWriteValue("Application Settings", "Language", "English", true);
        }
    }

    private void CreateCalendarDays()
    {
        DayHolder.removeAll();
        DayHolder.validate();
        DayHolder.repaint();

        int daysInMonth = Calendar.getInstance().getActualMaximum(5);
        int linecounter = 0;

        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 7; j++)
            {
                CalendarDay day = new CalendarDay(this, linecounter + 1);

                day.setBackground(new Color(1.0F, 0.0F, 0.0F, 1.0F));

                day.setDayForecolor(Color.WHITE);
                day.setSelectionIndex(linecounter);

                if (linecounter < 7)
                {
                    if (linecounter == 0)
                    {
                        day.setLocation(10, 30);
                    } else
                    {
                        day.setLocation(DayHolder.getComponents()[(linecounter - 1)].getX() + 52, 30);
                    }
                } else if ((linecounter >= 7) && (linecounter < 14))
                {
                    if (linecounter == 7)
                    {
                        day.setLocation(10, 82);
                    } else
                    {
                        day.setLocation(DayHolder.getComponents()[(linecounter - 8)].getX() + 52, 82);
                    }
                } else if ((linecounter >= 14) && (linecounter < 21))
                {
                    if (linecounter == 14)
                    {
                        day.setLocation(10, 134);
                    } else
                    {
                        day.setLocation(DayHolder.getComponents()[(linecounter - 8)].getX() + 52, 134);
                    }
                } else if ((linecounter >= 21) && (linecounter < 28))
                {
                    if (linecounter == 21)
                    {
                        day.setLocation(10, 186);
                    } else
                    {
                        day.setLocation(DayHolder.getComponents()[(linecounter - 8)].getX() + 52, 186);
                    }
                } else if ((linecounter >= 28) && (linecounter < 35))
                {
                    if (linecounter == 28)
                    {
                        day.setLocation(10, 238);
                    } else
                    {
                        day.setLocation(DayHolder.getComponents()[(linecounter - 8)].getX() + 52, 238);
                    }
                } else if ((linecounter >= 35) && (linecounter < 42))
                {
                    if (linecounter == 35)
                    {
                        day.setLocation(10, 290);
                    } else
                    {
                        day.setLocation(DayHolder.getComponents()[(linecounter - 8)].getX() + 52, 290);
                    }
                }

                linecounter++;

                calendarDay.add(day);
                DayHolder.add(day);
            }
        }

        for (int j = 0; j < 7; j++)
        {
            weekDays[j] = new JLabel();

            weekDays[j].setHorizontalAlignment(0);
            weekDays[j].setForeground(Color.WHITE);
            weekDays[j].setFont(new java.awt.Font("Microsoft Sans Serif", 0, 15));
            weekDays[j].setSize(30, 15);
            DayHolder.add(weekDays[j]);
            DayHolder.repaint();
            DayHolder.revalidate();
        }

        SetWeekTitles();

        FillCalendar();
    }

    public void SetWeekTitles()
    {
        weekDays[0].setText("Mo"); // TODO: Localise it!
        weekDays[0].setLocation(DayHolder.getComponents()[0].getX() + (50 - weekDays[0].getWidth()) / 2, 10);

        weekDays[1].setText("Di");
        weekDays[1].setLocation(DayHolder.getComponents()[1].getX() + (50 - weekDays[1].getWidth()) / 2, 10);

        weekDays[2].setText("Mi");
        weekDays[2].setLocation(DayHolder.getComponents()[2].getX() + (50 - weekDays[2].getWidth()) / 2, 10);

        weekDays[3].setText("Do");
        weekDays[3].setLocation(DayHolder.getComponents()[3].getX() + (50 - weekDays[3].getWidth()) / 2, 10);

        weekDays[4].setText("Fr");
        weekDays[4].setLocation(DayHolder.getComponents()[4].getX() + (50 - weekDays[4].getWidth()) / 2, 10);

        weekDays[5].setText("Sa");
        weekDays[5].setLocation(DayHolder.getComponents()[5].getX() + (50 - weekDays[5].getWidth()) / 2, 10);

        weekDays[6].setText("So");
        weekDays[6].setLocation(DayHolder.getComponents()[6].getX() + (50 - weekDays[6].getWidth()) / 2, 10);
    }

    private void FillCalendar()
    {
        Calendar setDate = Calendar.getInstance();
        setDate.set(yearHolder, monthHolder, 1);

        String dayOfWeek = setDate.getDisplayName(7, 1, Locale.getDefault()).substring(0, 2);

        int daysCurrentMonth = setDate.getActualMaximum(Calendar.DAY_OF_MONTH);

        Calendar dateLastMotnh = Calendar.getInstance();
        dateLastMotnh.set(monthHolder == 1 ? yearHolder - 1 : yearHolder, monthHolder == 1 ? 12 : monthHolder - 1, 1);

        int daysLastMonth = dateLastMotnh.getActualMaximum(Calendar.DAY_OF_MONTH);
        int daysNextMonth = 1;
        int leftDays = 0;

        String today = java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy").format(LocalDate.now());
        //Functions.DebugPrint("Current day = " + dayOfWeek + " **** Days in last month = " + daysLastMonth + " **** Date of last month = " + java.text.SimpleDateFormat.getInstance().format(dateLastMotnh.getTime()));
//        Functions.DebugPrint();
        switch (dayOfWeek)
        {
            case "Mo":
            {
                for (int j = 0; j < daysCurrentMonth; j++)
                {
                    calendarDay.get(j).setDisplayedDay(j + 1);
                    calendarDay.get(j).setMonth(monthHolder);
                    calendarDay.get(j).setYear(yearHolder);

                    calendarDay.get(j).setDayForecolor(Color.WHITE);

                    calendarDay.get(j).setFoodInDatabase(false);
                    calendarDay.get(j).ClearCurrentDay();
                    calendarDay.get(j).ClearSelection();

                    if (j + 1 == java.time.LocalDate.now().getDayOfMonth())
                    {
                        if ((j + 1 + "." + monthHolder + "." + yearHolder).equals(today))
                        {
                            currentDayIndex = j;
                            calendarDay.get(j).setIsCurrentDay();
                        }
                    }
                }

                leftDays = 42 - daysCurrentMonth;

                for (int k = 42 - leftDays; k < 42; k++)
                {
                    calendarDay.get(k).setDisplayedDay(daysNextMonth);
                    calendarDay.get(k).setMonth(monthHolder + 1);
                    calendarDay.get(k).setYear(yearHolder);

                    calendarDay.get(k).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(k).setFoodInDatabase(false);
                    calendarDay.get(k).ClearCurrentDay();
                    calendarDay.get(k).ClearSelection();

                    daysNextMonth++;
                }
            }
            break;
            case "Di":
            case "Tu":
            {
                calendarDay.get(0).setDisplayedDay(daysLastMonth);
                calendarDay.get(0).setMonth(monthHolder - 1);
                calendarDay.get(0).setYear(yearHolder);

                calendarDay.get(0).setDayForecolor(new Color(100, 100, 101));

                calendarDay.get(0).setFoodInDatabase(false);
                calendarDay.get(0).ClearCurrentDay();
                calendarDay.get(0).ClearSelection();

                for (int j = 1; j <= daysCurrentMonth + 1; j++)
                {
                    calendarDay.get(j).setDisplayedDay(j);
                    calendarDay.get(j).setMonth(monthHolder);
                    calendarDay.get(j).setYear(yearHolder);

                    calendarDay.get(j).setDayForecolor(Color.WHITE);

                    calendarDay.get(j).setFoodInDatabase(false);
                    calendarDay.get(j).ClearCurrentDay();
                    calendarDay.get(j).ClearSelection();

                    if (j == java.time.LocalDate.now().getDayOfMonth())
                    {
                        if ((j + "." + monthHolder + "." + yearHolder).equals(today))
                        {
                            currentDayIndex = j;
                            calendarDay.get(j).setIsCurrentDay();
                        }
                    }
                }

                leftDays = 42 - (daysCurrentMonth + 1);

                for (int k = 42 - leftDays; k < 42; k++)
                {
                    calendarDay.get(k).setDisplayedDay(daysNextMonth);
                    calendarDay.get(k).setMonth(monthHolder + 1);
                    calendarDay.get(k).setYear(yearHolder);

                    calendarDay.get(k).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(k).setFoodInDatabase(false);
                    calendarDay.get(k).ClearCurrentDay();
                    calendarDay.get(k).ClearSelection();

                    daysNextMonth++;
                }
            }
            break;
            case "Mi":
            case "We":
            {
                daysLastMonth--;

                for (int i = 0; i <= 1; i++)
                {
                    System.out.println("LOOP = Current day: " + dayOfWeek + " - Days in last month: " + daysLastMonth);
                    calendarDay.get(i).setDisplayedDay(daysLastMonth);
                    calendarDay.get(i).setMonth(monthHolder - 1);
                    calendarDay.get(i).setYear(yearHolder);

                    calendarDay.get(i).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(i).setFoodInDatabase(false);
                    calendarDay.get(i).ClearCurrentDay();
                    calendarDay.get(i).ClearSelection();

                    daysLastMonth++;
                }

                for (int j = 2; j <= daysCurrentMonth + 2; j++)
                {
                    calendarDay.get(j).setDisplayedDay(j - 1);
                    calendarDay.get(j).setMonth(monthHolder);
                    calendarDay.get(j).setYear(yearHolder);

                    calendarDay.get(j).setDayForecolor(Color.WHITE);

                    calendarDay.get(j).setFoodInDatabase(false);
                    calendarDay.get(j).ClearCurrentDay();
                    calendarDay.get(j).ClearSelection();

                    if (j - 1 == java.time.LocalDate.now().getDayOfMonth())
                    {
                        if ((j - 1 + "." + monthHolder + "." + yearHolder).equals(today))
                        {
                            currentDayIndex = j;
                            calendarDay.get(j).setIsCurrentDay();
                        }
                    }
                }

                leftDays = 42 - (daysCurrentMonth + 2);

                for (int k = 42 - leftDays; k < 42; k++)
                {
                    calendarDay.get(k).setDisplayedDay(daysNextMonth);
                    calendarDay.get(k).setMonth(monthHolder + 1);
                    calendarDay.get(k).setYear(yearHolder);

                    calendarDay.get(k).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(k).setFoodInDatabase(false);
                    calendarDay.get(k).ClearCurrentDay();
                    calendarDay.get(k).ClearSelection();

                    daysNextMonth++;
                }
            }
            break;
            case "Do":
            case "Th":
            {
                daysLastMonth -= 2;

                for (int i = 0; i <= 2; i++)
                {
                    calendarDay.get(i).setDisplayedDay(daysLastMonth);
                    calendarDay.get(i).setMonth(monthHolder - 1);
                    calendarDay.get(i).setYear(yearHolder);

                    calendarDay.get(i).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(i).setFoodInDatabase(false);
                    calendarDay.get(i).ClearCurrentDay();
                    calendarDay.get(i).ClearSelection();

                    daysLastMonth++;
                }

                for (int j = 3; j <= daysCurrentMonth + 3; j++)
                {
                    calendarDay.get(j).setDisplayedDay(j - 2);
                    calendarDay.get(j).setMonth(monthHolder);
                    calendarDay.get(j).setYear(yearHolder);

                    calendarDay.get(j).setDayForecolor(Color.WHITE);

                    calendarDay.get(j).setFoodInDatabase(false);
                    calendarDay.get(j).ClearCurrentDay();
                    calendarDay.get(j).ClearSelection();

                    if (j - 2 == java.time.LocalDate.now().getDayOfMonth())
                    {
                        if ((j - 2 + "." + monthHolder + "." + yearHolder).equals(today))
                        {
                            currentDayIndex = j;
                            calendarDay.get(j).setIsCurrentDay();
                        }
                    }
                }

                leftDays = 42 - (daysCurrentMonth + 3);

                for (int k = 42 - leftDays; k < 42; k++)
                {
                    calendarDay.get(k).setDisplayedDay(daysNextMonth);
                    calendarDay.get(k).setMonth(monthHolder + 1);
                    calendarDay.get(k).setYear(yearHolder);

                    calendarDay.get(k).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(k).setFoodInDatabase(false);
                    calendarDay.get(k).ClearCurrentDay();
                    calendarDay.get(k).ClearSelection();

                    daysNextMonth++;
                }
            }
            break;
            case "Fr":
            {
                daysLastMonth -= 3;

                for (int i = 0; i <= 3; i++)
                {
                    calendarDay.get(i).setDisplayedDay(daysLastMonth);
                    calendarDay.get(i).setMonth(monthHolder - 1);
                    calendarDay.get(i).setYear(yearHolder);

                    calendarDay.get(i).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(i).setFoodInDatabase(false);
                    calendarDay.get(i).ClearCurrentDay();
                    calendarDay.get(i).ClearSelection();

                    daysLastMonth++;
                }

                for (int j = 4; j <= daysCurrentMonth + 4; j++)
                {
                    calendarDay.get(j).setDisplayedDay(j - 3);
                    calendarDay.get(j).setMonth(monthHolder);
                    calendarDay.get(j).setYear(yearHolder);

                    calendarDay.get(j).setDayForecolor(Color.WHITE);

                    calendarDay.get(j).setFoodInDatabase(false);
                    calendarDay.get(j).ClearCurrentDay();
                    calendarDay.get(j).ClearSelection();

                    if (j - 3 == java.time.LocalDate.now().getDayOfMonth())
                    {
                        if ((j - 3 + "." + monthHolder + "." + yearHolder).equals(today))
                        {
                            currentDayIndex = j;
                            calendarDay.get(j).setIsCurrentDay();
                        }
                    }
                }

                leftDays = 42 - (daysCurrentMonth + 4);

                for (int k = 42 - leftDays; k < 42; k++)
                {
                    calendarDay.get(k).setDisplayedDay(daysNextMonth);
                    calendarDay.get(k).setMonth(monthHolder + 1);
                    calendarDay.get(k).setYear(yearHolder);

                    calendarDay.get(k).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(k).setFoodInDatabase(false);
                    calendarDay.get(k).ClearCurrentDay();
                    calendarDay.get(k).ClearSelection();

                    daysNextMonth++;
                }
            }
            break;
            case "Sa":
            {
                daysLastMonth -= 4;

                for (int i = 0; i <= 4; i++)
                {
                    calendarDay.get(i).setDisplayedDay(daysLastMonth);
                    calendarDay.get(i).setMonth(monthHolder - 1);
                    calendarDay.get(i).setYear(yearHolder);

                    calendarDay.get(i).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(i).setFoodInDatabase(false);
                    calendarDay.get(i).ClearCurrentDay();
                    calendarDay.get(i).ClearSelection();

                    daysLastMonth++;
                }

                for (int j = 5; j <= daysCurrentMonth + 5; j++)
                {
                    calendarDay.get(j).setDisplayedDay(j - 4);
                    calendarDay.get(j).setMonth(monthHolder);
                    calendarDay.get(j).setYear(yearHolder);

                    calendarDay.get(j).setDayForecolor(Color.WHITE);

                    calendarDay.get(j).setFoodInDatabase(false);
                    calendarDay.get(j).ClearCurrentDay();
                    calendarDay.get(j).ClearSelection();

                    if (j - 4 == java.time.LocalDate.now().getDayOfMonth())
                    {
                        String bufferCurrentDay = String.valueOf(j - 4).length() == 1 ? "0" + (j - 4) : Integer.toString(j - 4);
                        String bufferCurrentMonth = String.valueOf(monthHolder).length() == 1 ? "0" + (monthHolder + 1) : Integer.toString(monthHolder + 1);

                        System.out.println(bufferCurrentDay + "." + bufferCurrentMonth + "." + yearHolder + " **** " + today);

                        if ((bufferCurrentDay + "." + bufferCurrentMonth + "." + yearHolder).equals(today))
                        {
                            currentDayIndex = j;
                            calendarDay.get(j).setIsCurrentDay();
                        }
                    }
                }

                leftDays = 42 - (daysCurrentMonth + 5);

                for (int k = 42 - leftDays; k < 42; k++)
                {
                    calendarDay.get(k).setDisplayedDay(daysNextMonth);
                    calendarDay.get(k).setMonth(monthHolder + 1);
                    calendarDay.get(k).setYear(yearHolder);

                    calendarDay.get(k).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(k).setFoodInDatabase(false);
                    calendarDay.get(k).ClearCurrentDay();
                    calendarDay.get(k).ClearSelection();

                    daysNextMonth++;
                }
            }
            break;
            case "So":
            case "Su":
            {
                daysLastMonth -= 5;

                for (int i = 0; i <= 5; i++)
                {
                    calendarDay.get(i).setDisplayedDay(daysLastMonth);
                    calendarDay.get(i).setMonth(monthHolder - 1);
                    calendarDay.get(i).setYear(yearHolder);

                    calendarDay.get(i).setDayForecolor(new Color(100, 100, 101));

                    calendarDay.get(i).setFoodInDatabase(false);
                    calendarDay.get(i).ClearCurrentDay();
                    calendarDay.get(i).ClearSelection();

                    daysLastMonth++;
                }

                for (int j = 6; j <= daysCurrentMonth + 6; j++)
                {
                    calendarDay.get(j).setDisplayedDay(j - 5);
                    calendarDay.get(j).setMonth(monthHolder);
                    calendarDay.get(j).setYear(yearHolder);

                    calendarDay.get(j).setDayForecolor(Color.WHITE);

                    calendarDay.get(j).setFoodInDatabase(false);
                    calendarDay.get(j).ClearCurrentDay();
                    calendarDay.get(j).ClearSelection();

                    if (j - 5 == java.time.LocalDate.now().getDayOfMonth())
                    {
                        if ((j - 5 + "." + monthHolder + "." + yearHolder).equals(today))
                        {
                            currentDayIndex = j;
                            calendarDay.get(j).setIsCurrentDay();
                        }
                    }
                }

                leftDays = 42 - (daysCurrentMonth + 6);

                if ((yearHolder == 2199) && (monthHolder == 12))
                {
                    for (int k = 42 - leftDays; k < 42; k++)
                    {
                        calendarDay.get(k).setDisplayedDay(-1);
                        calendarDay.get(k).setMonth(monthHolder + 1);
                        calendarDay.get(k).setYear(yearHolder);

                        calendarDay.get(k).setFoodInDatabase(false);
                        calendarDay.get(k).ClearCurrentDay();
                        calendarDay.get(k).ClearSelection();

                        daysNextMonth++;
                    }

                } else
                {
                    for (int k = 42 - leftDays; k < 42; k++)
                    {
                        calendarDay.get(k).setDisplayedDay(daysNextMonth);
                        calendarDay.get(k).setMonth(monthHolder + 1);
                        calendarDay.get(k).setYear(yearHolder);

                        calendarDay.get(k).setDayForecolor(new Color(100, 100, 101));

                        calendarDay.get(k).setFoodInDatabase(false);
                        calendarDay.get(k).ClearCurrentDay();
                        calendarDay.get(k).ClearSelection();

                        daysNextMonth++;
                    }
                }
            }
            break;
        }

        //MarkDayIfMealInDatabase();
    }
//
//    public void MarkDayIfMealInDatabase()
//    {
//        for (int a = 0; a < calendarDay.Count; a++)
//        {
//            if (calendarDay[a].hasFoodInDatabasePublic)
//            {
//                calendarDay[a].setFoodInDatabase(false);
//            }
//        }
//
//        // Color a day if it has food in the database
//        for (int i = 0; i < dayOverviewLayout.mealPerDayDatabaseDataSet.MealPerDayDatabase.Rows.Count; i++)
//        {
//            DateTime bufferDate = new DateTime();
//            bufferDate = DateTime.Parse(dayOverviewLayout.mealPerDayDatabaseDataSet.MealPerDayDatabase.Rows[i][1].ToString());
//
//            for (int j = 0; j < calendarDay.Count; j++)
//            {
//                if (bufferDate.ToString("dd.MM.yyyy") == (calendarDay[j].DisplayedDay.ToString("00") + "." + calendarDay[j].Month.ToString("00") + "." + calendarDay[j].Year.ToString("0000")))
//                {
//                    calendarDay[j].SetFoodInDatabase();
//                }
//            }
//        }
//    }
//

    public void ResetSelection()
    {
        for (int i = 0; i < (calendarDay.size() - 1); i++)
        {
            if (lastSelectedDayIndex != calendarDay.get(i).getSelectionIndex())
            {
                calendarDay.get(i).ClearSelection();
            }

            if (!calendarDay.get(i).getIsCurrentDay())
            {
                calendarDay.get(i).ClearCurrentDay();
            }
        }
        //foreach (CalendarDay day in calendarDay)
        //{

        //    day.ClearSelection();
        //    return;
        //    if (lastSelectedDayIndex != day.SelectionIndex)
        //    {
        //        day.ClearSelection();
        //    }
        //}
    }
//
//    private void ChangeDaily_Click(object sender, EventArgs e)
//    {
//        bmr_DailyCalorieCalculate = new BMR_DailyCalorieCalculate();
//
//        bmr_DailyCalorieCalculate.FormClosing += new FormClosingEventHandler(bmr_DailyCalorieCalculate_FormClosed);
//
//        bmr_DailyCalorieCalculate.ShowDialog();
//    }
//
//    private void bmr_DailyCalorieCalculate_FormClosed(object sender, FormClosingEventArgs e)
//    {
//        bmr_DailyCalorieCalculate = null;
//    }
//
//    private void button3_Click(object sender, EventArgs e)
//    {
//        dayOverviewLayout.Tag = "this is a test";
//        MessageBox.Show(dayOverviewLayout.Tag.ToString());
//    }
//
//    private void Options_Click(object sender, EventArgs e)
//    {
//        optionsMenu = new OptionsMenu();
//
//        optionsMenu.MainMenuPublic = this;
//        optionsMenu.FormClosing += new FormClosingEventHandler(optionsMenu_FormClosed);
//        optionsMenu.Owner = this;
//        optionsMenu.Text = "Einstellungen";
//
//        optionsMenu.ShowDialog();
//    }
//
//    private void optionsMenu_FormClosed(object sender, FormClosingEventArgs e)
//    {
//        optionsMenu = null;
//    }
}
